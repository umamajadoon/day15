#include <iostream>
#include <complex>
#include <vector>
#include <string>
#include <map>
#include <algorithm>
#include <cmath>
#include <functional>
#include <cctype>

template<typename T>
T add(const T& a, const T& b) {
    return a + b;
}

template<typename T>
T subtract(const T& a, const T& b) {
    return a - b;
}

template<typename T>
T multiply(const T& a, const T& b) {
    return a * b;
}

template<typename T>
T divide(const T& a, const T& b) {
    if (b == T(0)) {
        throw std::runtime_error("Division by zero error.");
    }
    return a / b;
}

template<typename T>
T evaluatePolynomial(const std::vector<T>& coefficients, const T& x) {
    T result = 0;
    for (size_t i = 0; i < coefficients.size(); ++i) {
        result += coefficients[i] * std::pow(x, i);
    }
    return result;
}

template<typename T>
T gcd(T a, T b) {
    return b == 0 ? a : gcd(b, a % b);
}

template<typename T>
std::vector<T> simplifyPolynomial(const std::vector<T>& coefficients) {
    if (coefficients.empty()) return coefficients;
    T divisor = coefficients[0];
    for (const T& coeff : coefficients) {
        divisor = gcd(divisor, coeff);
    }
    std::vector<T> simplified(coefficients.size());
    for (size_t i = 0; i < coefficients.size(); ++i) {
        simplified[i] = coefficients[i] / divisor;
    }
    return simplified;
}

template<typename T>
T evaluateSimplifiedPolynomial(const std::vector<T>& coefficients, const T& x) {
    std::vector<T> simplified = simplifyPolynomial(coefficients);
    return evaluatePolynomial(simplified, x);
}

bool safeMultiply(int64_t a, int64_t b, int64_t& result) {
    if (a == 0 || b == 0) {
        result = 0;
        return true;
    }
    if (a > INT64_MAX / b) return false;
    result = a * b;
    return true;
}

int64_t factorial(int n) {
    if (n < 0) throw std::invalid_argument("Negative input not allowed.");
    if (n == 0 || n == 1) return 1;
    int64_t prev = factorial(n - 1);
    int64_t result;
    if (!safeMultiply(prev, n, result)) {
        throw std::overflow_error("Integer overflow detected.");
    }
    return result;
}

template<typename Func>
void integrateFactorial(int n, Func f) {
    try {
        int64_t fact = factorial(n);
        f(fact);
    } catch (const std::overflow_error&) {
        std::cout << "Overflow occurred during factorial calculation.\n";
    }
}

template<typename T>
T customOperation(const T& a, const T& b, char op) {
    switch (op) {
        case '+': return add(a, b);
        case '-': return subtract(a, b);
        case '*': return multiply(a, b);
        case '/': return divide(a, b);
        default: throw std::invalid_argument("Invalid operation.");
    }
}

template<typename T>
class Fibonacci {
    std::map<int, T> cache;
public:
    T get(int n) {
        if (n < 0) throw std::invalid_argument("Negative input not allowed.");
        if (n == 0) return 0;
        if (n == 1) return 1;
        if (cache.find(n) != cache.end()) return cache[n];
        cache[n] = get(n - 1) + get(n - 2);
        return cache[n];
    }
};

void replaceAll(std::string& str, const std::map<std::string, std::string>& replacements) {
    for (const auto& pair : replacements) {
        size_t pos = 0;
        while ((pos = str.find(pair.first, pos)) != std::string::npos) {
            str.replace(pos, pair.first.length(), pair.second);
            pos += pair.second.length();
        }
    }
}

bool isPalindrome(const std::string& str) {
    auto left = str.begin();
    auto right = str.end() - 1;
    while (left < right) {
        if (std::tolower(*left) != std::tolower(*right)) return false;
        ++left;
        --right;
    }
    return true;
}

int evaluateExpression(const std::string& expr, const std::map<std::string, int>& variables) {
    int result = 0;
    std::string currentVar;
    char operation = '+';
    for (char c : expr) {
        if (std::isdigit(c)) {
            result += (operation == '+' ? 1 : -1) * (c - '0');
        } else if (std::isalpha(c)) {
            currentVar += c;
        } else if (c == '+' || c == '-') {
            if (!currentVar.empty()) {
                result += (operation == '+' ? 1 : -1) * variables.at(currentVar);
                currentVar.clear();
            }
            operation = c;
        }
    }
    if (!currentVar.empty()) {
        result += (operation == '+' ? 1 : -1) * variables.at(currentVar);
    }
    return result;
}

void tokenize(const std::string& str, const std::string& delimiters, std::vector<std::string>& tokens) {
    size_t start = 0;
    size_t end = str.find_first_of(delimiters);
    while (end != std::string::npos) {
        if (end > start) {
            tokens.emplace_back(str.substr(start, end - start));
        }
        start = end + 1;
        end = str.find_first_of(delimiters, start);
    }
    if (start < str.length()) {
        tokens.emplace_back(str.substr(start));
    }
}

int main() {
    return 0;
}